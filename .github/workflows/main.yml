name: CI

on:
  # Run on all pull requests and all pushes to master
  push:
    branches: [ master ]
  pull_request:

  # Allow running this workflow manually
  workflow_dispatch:

env:
  # Set defines for builds/tests
  DEFINES: "LOG_LEVEL_VERBOSITY=LOG_LEVEL_WARN"

jobs:
  build:
    runs-on: ubuntu-16.04
    steps:
      - uses: actions/checkout@v2

      # TODO: cache all the setup

      - name: Setup directories
        run: |
          # create directory that will be on the PATH
          mkdir -p ~/.local/bin
          export PATH=${PATH}:~/.local/bin
          mkdir -p ~/source

      - name: Install gcc, clang, clang-format
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-fast -y install gcc-6
          sudo apt-fast -y install clang-5.0
          sudo apt-fast -y install clang-format-5.0
          sudo apt-fast -y install libc6-i386
          ln -sf `which gcc-6` ~/.local/bin/gcc
          ln -sf `which clang-5.0` ~/.local/bin/clang
          ln -sf `which clang-format-5.0` ~/.local/bin/clang-format

      - name: Install GCC Arm Embedded Toolchain
        env:
          GCC_DIR_PATH: ${HOME}/gcc-arm-none-eabi-6-2017-q2-update
          GCC_ARCHIVE_PATH: ${HOME}/source/gcc-arm-none-eabi-6-2017-q2-update-linux.tar.bz2
          GCC_URL: https://developer.arm.com/-/media/Files/downloads/gnu-rm/6-2017q2/gcc-arm-none-eabi-6-2017-q2-update-linux.tar.bz2?revision=2cc92fb5-3e0e-402d-9197-bdfc8224d8a5?product=GNU%20Arm%20Embedded%20Toolchain,64-bit,,Linux,6-2017-q2-update
        run: |
          wget $GCC_URL -O $GCC_ARCHIVE_PATH
          tar xfj $GCC_ARCHIVE_PATH -C ~
          export PATH=${PATH}:${GCC_DIR_PATH}/bin

      - name: Install GNU Make 4.1
        env:
          MAKE_DIR: make-4.1
          MAKE_ARCHIVE: make-4.1.tar.gz
          MAKE_URL: http://ftp.gnu.org/gnu/make/make-4.1.tar.gz
        run: |
          wget $MAKE_URL
          tar xvf $MAKE_ARCHIVE
          cd $MAKE_DIR
          ./configure --prefix=~/.local
          make
          make install
          cd ..
          rm -rf $MAKE_DIR

      - name: Install Python tooling
        run: |
          pip3 install --user pylint
          pip3 install --user autopep8
          # install dependencies from all requirements.txt in the repo
          make install_requirements

      - name: Force PATH to update
        run: hash -r

      - name: Print versions of everything
        run: |
          arm-none-eabi-gcc --version
          arm-none-eabi-objcopy --version
          arm-none-eabi-objdump --version
          arm-none-eabi-size --version
          arm-none-eabi-gcc-ar --version
          arm-none-eabi-gdb --version
          gcc --version
          make --version
          clang --version
          clang-format --version
          pylint --version
          autopep8 --version

      - name: Format and lint
        run: |
          make test_format
          make lint
          make pylint

      - name: Build and test
        run: |
          make build_all PLATFORM=stm32f0xx DEFINES="${DEFINES}"
          make clean
          make build_all PLATFORM=x86 DEFINE="${DEFINES}"
          make test_all PLATFORM=x86 DEFINE="${DEFINES}"
          make pytest_all
          make build_all PLATFORM=x86 COMPILER=clang DEFINE="${DEFINES}"
