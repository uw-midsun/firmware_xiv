name: CI

on:
  # Run on all pull requests and all pushes to master
  push:
    branches: [ master ]
  pull_request:

  # Allow running this workflow manually
  workflow_dispatch:

env:
  # Set defines for builds/tests
  DEFINES: "LOG_LEVEL_VERBOSITY=LOG_LEVEL_WARN"

jobs:
  build:
    runs-on: ubuntu-16.04
    timeout-minutes: 12
    steps:
      - uses: actions/checkout@v2

      # TODO: cache all the setup

      - name: Setup directories
        run: |
          # create directory that will be on the PATH
          mkdir -p ~/.local/bin
          echo "${HOME}/.local/bin" >> $GITHUB_PATH
          mkdir -p ~/source

      - name: Install gcc, clang, clang-format
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-fast -y install gcc-6
          sudo apt-fast -y install clang-5.0
          sudo apt-fast -y install clang-format-5.0
          sudo apt-fast -y install libc6-i386
          # for vcan module
          sudo apt-fast -y install linux-modules-extra-$(uname -r)
          ln -sf `which gcc-6` ~/.local/bin/gcc
          ln -sf `which clang-5.0` ~/.local/bin/clang
          ln -sf `which clang-format-5.0` ~/.local/bin/clang-format

      - name: Install STM32 toolchain
        env:
          GCC_PATH: gcc-arm-none-eabi-6-2017-q2-update
          GCC_ARCHIVE_PATH: gcc-arm-none-eabi-6-2017-q2-update-linux.tar.bz2
          GCC_URL: https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu-rm/6-2017q2/gcc-arm-none-eabi-6-2017-q2-update-linux.tar.bz2
        run: |
          cd ${HOME}
          wget -nv $GCC_URL
          mkdir -p $GCC_PATH
          tar -xjf $GCC_ARCHIVE_PATH
          echo "${HOME}/${GCC_PATH}/bin" >> $GITHUB_PATH

      - name: Install GNU Make 4.1
        env:
          MAKE_PATH: make-4.1
          MAKE_ARCHIVE_PATH: make-4.1.tar.gz
          MAKE_URL: http://ftp.gnu.org/gnu/make/make-4.1.tar.gz
        run: |
          wget -nv $MAKE_URL
          tar xvf $MAKE_ARCHIVE_PATH
          cd $MAKE_PATH
          ./configure --prefix=${HOME}/.local
          make
          make install
          cd ..
          rm -rf $MAKE_PATH

      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Python tooling
        run: |
          pip install --user virtualenv
          pip install --upgrade pip
          pip install --upgrade setuptools
          make install_requirements

      - name: Force PATH to update
        run: hash -r

      - name: Print versions of everything
        run: |
          arm-none-eabi-gcc --version
          arm-none-eabi-objcopy --version
          arm-none-eabi-objdump --version
          arm-none-eabi-size --version
          arm-none-eabi-gcc-ar --version
          arm-none-eabi-gdb --version
          gcc --version
          make --version
          clang --version
          clang-format --version
          .venv/bin/pip3 freeze

      - name: Format and lint
        run: |
          make test_format
          make lint
          make pylint

      - name: Build codegen
        run: |
          make codegen
          make codegen_dbc

      - name: Check for uncommitted codegen changes
        id: check-uncommitted-changes
        continue-on-error: true
        # https://stackoverflow.com/a/3879077
        run: |
          git update-index --refresh || true
          git diff-index --quiet HEAD --

      - name: Post PR comment on uncommitted changes
        if: ${{ steps.check-uncommitted-changes.outcome == 'failure' }}
        uses: actions/github-script@v4
        with:
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync(
              './.github/workflows/uncommitted-codegen-changes.md', 'utf8');
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment,
            });

      - name: Fail on uncommitted changes
        if: ${{ steps.check-uncommitted-changes.outcome == 'failure' }}
        run: exit 1

      - name: Build stm32f0xx
        id: build-stm32
        run: |
          make build_all PLATFORM=stm32f0xx DEFINE="${DEFINES}"
          make clean

      - name: Build and test
        id: build-test
        run: |
          make build_all PLATFORM=x86 DEFINE="${DEFINES}"
          make test_all PLATFORM=x86 DEFINE="${DEFINES}"
          make pytest_all
          make build_all PLATFORM=x86 COMPILER=clang DEFINE="${DEFINES}"
