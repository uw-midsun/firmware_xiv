name: CI

on:
  #Run on all pull requests and all pushes to master
  push:
    branches: [ master ]
  pull_request:

  # Allow running this workflow manually
  workflow_dispatch:

env:
  # Set defines for builds/tests
  DEFINES: "LOG_LEVEL_VERBOSITY=LOG_LEVEL_WARN"

jobs:
  build:
    runs-on: ubuntu-18.04
    timeout-minutes: 12
    steps:
      - uses: actions/checkout@v2

      - name: Setup directories
        run: |
          # create directory that will be on the PATH
          mkdir -p ~/.local/bin
          echo "${HOME}/.local/bin" >> $GITHUB_PATH
          mkdir -p ~/source
     
      - uses: actions/cache@v2
        id: cache-gcc
        with:
          path: ~/gcc
          key: ${{ runner.os }}-gcc

      - uses: actions/cache@v2
        id: cache-clang
        with:
          path: /usr/lib/llvm-5.0/bin/clang
          key: ${{ runner.os }}-clang
      
      - uses: actions/cache@v2
        id: cache-clang-format
        with:
          path: /usr/bin/clang-format-5.0
          key: ${{ runner.os }}-clang-format

      - uses: actions/cache@v2
        id: cache-libc6-i386
        with:
          path: /var/lib/dpkg/info/libc6-i386
          key: ${{ runner.os }}-libc6-i386

      - uses: actions/cache@v2
        id: cache-linux-module
        with:
          path: /var/lib/dpkg/info/linux-modules-extra-4.15.0-20-generic
          key: ${{ runner.os }}-linux-module

      - uses: actions/cache@v2
        id: cache-make
        with:
          path: /usr/bin/make
          key: ${{ runner.os }}-make

      - uses: actions/cache@v2
        id: cache-pip
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          #path: $HOME/.cache/pip                    

      - uses: actions/cache@v2
        id: cache-arm-v1
        with:
          path: $HOME/.arm-none-eabi-gcc-cache
          key: ${{ runner.os }}-arm-v1
      
      - name: Add repo and update
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update

      - name: Install gcc  
        if: steps.cache-gcc.outputs.cache-hit != 'true'
        run: sudo apt-fast -y install gcc-6

      # - name: Install gcc
      #   env:
      #     CACHE_HIT: ${{steps.cache-gcc.outputs.cache-hit}}
      #   run: |
      #     if [[ "$CACHE_HIT" == 'true' ]]; then
      #      sudo cp --force --recursive ~/gcc/* /
      #     else
      #       sudo apt-fast -y install gcc-6
      #       sudo dpkg -L gcc-6 | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/gcc/       
      #       for dep in cpp-6 gcc-6-base gcc-8-base libasan3 libgcc-6-dev libmpx2; do
      #         dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/gcc/
      #       done
      #     fi 
          
      - name: Install clang
        if: steps.cache-clang.outputs.cache-hit != 'true'
        run: sudo apt-fast -y install clang-5.0

      - name: Install clang-format
        if: steps.cache-clang-format.outputs.cache-hit != 'true'
        run: sudo apt-fast -y install clang-format-5.0

      - name: Install libc6-i386
        if: steps.cache-libc6-i386.outputs.cache-hit != 'true'
        run: sudo apt-fast -y install libc6-i386

        # for vcan module
      - name: Install linux modules
        if: steps.cache-linux-module.outputs.cache-hit != 'true'
        run: sudo apt-fast -y install linux-modules-extra-$(uname -r)

      - name: Which gcc, clang, clang-format
        run: |
          ln -sf `which gcc-6` ~/.local/bin/gcc
          ln -sf `which clang-5.0` ~/.local/bin/clang
          ln -sf `which clang-format-5.0` ~/.local/bin/clang-format
  
      - name: Make arm cache directory
        #run: 
          #mkdir -p /home/runner/.arm-none-eabi-gcc-cache
        run: |
          mkdir -p ~/.arm-none-eabi-gcc-cache
          echo "${HOME}/.arm-none-eabi-gcc-cache" >> $GITHUB_PATH

      - name: Install STM32 toolchain
        env:
          GCC_PATH: gcc-arm-none-eabi-6-2017-q2-update
          GCC_ARCHIVE_PATH: gcc-arm-none-eabi-6-2017-q2-update-linux.tar.bz2
          GCC_URL: https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu-rm/6-2017q2/gcc-arm-none-eabi-6-2017-q2-update-linux.tar.bz2
        run: |
          cd ${HOME}
          wget -nv $GCC_URL
          mkdir -p $GCC_PATH
          tar -xjf $GCC_ARCHIVE_PATH
          echo "${HOME}/${GCC_PATH}/bin" >> $GITHUB_PATH

      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install Python tooling
        if: steps.cache-pip.outputs.cache-hit != 'true'
        run: |
          pip install --user virtualenv
          pip install --upgrade pip
          pip install --upgrade setuptools
          sudo apt install python3-testresources
          make install_requirements_ci

      - name: Force PATH to update
        run: hash -r

      - name: Print versions of everything
        run: |
          arm-none-eabi-gcc --version
          arm-none-eabi-objcopy --version
          arm-none-eabi-objdump --version
          arm-none-eabi-size --version
          arm-none-eabi-gcc-ar --version
          arm-none-eabi-gdb --version
          gcc --version
          make --version
          clang --version
          clang-format --version
          .venv/bin/pip3 freeze

      - name: Format
        run: make test_format

      - name: Lint
        run: make lint

      - name: Pylint
        run: make pylint

      - name: Build codegen
        run: |
          make codegen
          make codegen_dbc

      - name: Check for uncommitted codegen changes
        id: check-uncommitted-changes
        continue-on-error: true
        # https://stackoverflow.com/a/3879077
        run: |
          git update-index --refresh || true
          git diff-index --quiet HEAD --

      - name: Post PR comment on uncommitted changes
        if: ${{ steps.check-uncommitted-changes.outcome == 'failure' }}
        uses: actions/github-script@v4
        with:
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync(
              './.github/workflows/uncommitted-codegen-changes.md', 'utf8');
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment,
            });

      - name: Fail on uncommitted changes
        if: ${{ steps.check-uncommitted-changes.outcome == 'failure' }}
        run: exit 1

      - name: Build stm32f0xx
        id: build-stm32
        run: |
          make build_all PLATFORM=stm32f0xx DEFINE="${DEFINES}"
          make clean

      - name: Build x86
        run: make build_all PLATFORM=x86 DEFINE="${DEFINES}"

      - name: Test x86
        run: make test_all PLATFORM=x86 DEFINE="${DEFINES}"
          
      - name: Pytest
        run: make pytest_all

      - name: Build x86 with clang
        run: make build_all PLATFORM=x86 COMPILER=clang DEFINE="${DEFINES}"
