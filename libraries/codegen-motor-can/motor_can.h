/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 32.19.0 Wed May 22 20:54:00 2019.
 */

#ifndef MOTOR_CAN_H
#define MOTOR_CAN_H

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define MOTOR_CAN_LEFT_ID_INFO_FRAME_ID (0x60u)
#define MOTOR_CAN_LEFT_STATUS_FRAME_ID (0x61u)
#define MOTOR_CAN_LEFT_BUS_MEASUREMENT_FRAME_ID (0x62u)
#define MOTOR_CAN_LEFT_VELOCITY_MEASUREMENT_FRAME_ID (0x63u)
#define MOTOR_CAN_LEFT_PHASE_CURRENT_MEASUREMENT_FRAME_ID (0x64u)
#define MOTOR_CAN_LEFT_MOTOR_VOLTAGE_VECTOR_MEASUREMENT_FRAME_ID (0x65u)
#define MOTOR_CAN_LEFT_MOTOR_CURRENT_VECTOR_MEASUREMENT_FRAME_ID (0x66u)
#define MOTOR_CAN_LEFT_MOTOR_BACK_EMF_MEASUREMENT_PREDICTION_FRAME_ID (0x67u)
#define MOTOR_CAN_LEFT_VOLTAGE_RAIL15_V1_V65_MEASUREMENT_FRAME_ID (0x68u)
#define MOTOR_CAN_LEFT_VOLTAGE_RAIL2_V51_V2_MEASUREMENT_FRAME_ID (0x69u)
#define MOTOR_CAN_LEFT_FAN_SPEED_MEASUREMENT_FRAME_ID (0x6au)
#define MOTOR_CAN_LEFT_SINK_MOTOR_TEMP_MEASUREMENT_FRAME_ID (0x6bu)
#define MOTOR_CAN_LEFT_AIR_IN_CPU_TEMP_MEASUREMENT_FRAME_ID (0x6cu)
#define MOTOR_CAN_LEFT_AIR_OUT_CAP_TEMP_MEASUREMENT_FRAME_ID (0x6du)
#define MOTOR_CAN_LEFT_ODOMETER_BUS_AH_MEASUREMENT_FRAME_ID (0x6eu)
#define MOTOR_CAN_RIGHT_ID_INFO_FRAME_ID (0x80u)
#define MOTOR_CAN_RIGHT_STATUS_FRAME_ID (0x81u)
#define MOTOR_CAN_RIGHT_BUS_MEASUREMENT_FRAME_ID (0x82u)
#define MOTOR_CAN_RIGHT_VELOCITY_MEASUREMENT_FRAME_ID (0x83u)
#define MOTOR_CAN_RIGHT_PHASE_CURRENT_MEASUREMENT_FRAME_ID (0x84u)
#define MOTOR_CAN_RIGHT_MOTOR_VOLTAGE_VECTOR_MEASUREMENT_FRAME_ID (0x85u)
#define MOTOR_CAN_RIGHT_MOTOR_CURRENT_VECTOR_MEASUREMENT_FRAME_ID (0x86u)
#define MOTOR_CAN_RIGHT_MOTOR_BACK_EMF_MEASUREMENT_PREDICTION_FRAME_ID (0x87u)
#define MOTOR_CAN_RIGHT_VOLTAGE_RAIL15_V1_V65_MEASUREMENT_FRAME_ID (0x88u)
#define MOTOR_CAN_RIGHT_VOLTAGE_RAIL2_V51_V2_MEASUREMENT_FRAME_ID (0x89u)
#define MOTOR_CAN_RIGHT_FAN_SPEED_MEASUREMENT_FRAME_ID (0x8au)
#define MOTOR_CAN_RIGHT_SINK_MOTOR_TEMP_MEASUREMENT_FRAME_ID (0x8bu)
#define MOTOR_CAN_RIGHT_AIR_IN_CPU_TEMP_MEASUREMENT_FRAME_ID (0x8cu)
#define MOTOR_CAN_RIGHT_AIR_OUT_CAP_TEMP_MEASUREMENT_FRAME_ID (0x8du)
#define MOTOR_CAN_RIGHT_ODOMETER_BUS_AH_MEASUREMENT_FRAME_ID (0x8eu)
#define MOTOR_CAN_LEFT_DRIVE_COMMAND_FRAME_ID (0x21u)
#define MOTOR_CAN_LEFT_MOTOR_POWER_COMMAND_FRAME_ID (0x22u)
#define MOTOR_CAN_LEFT_RESET_COMMAND_FRAME_ID (0x23u)
#define MOTOR_CAN_RIGHT_DRIVE_COMMAND_FRAME_ID (0x41u)
#define MOTOR_CAN_RIGHT_MOTOR_POWER_COMMAND_FRAME_ID (0x42u)
#define MOTOR_CAN_RIGHT_RESET_COMMAND_FRAME_ID (0x43u)

/* Frame lengths in bytes. */
#define MOTOR_CAN_LEFT_ID_INFO_LENGTH (8u)
#define MOTOR_CAN_LEFT_STATUS_LENGTH (8u)
#define MOTOR_CAN_LEFT_BUS_MEASUREMENT_LENGTH (8u)
#define MOTOR_CAN_LEFT_VELOCITY_MEASUREMENT_LENGTH (8u)
#define MOTOR_CAN_LEFT_PHASE_CURRENT_MEASUREMENT_LENGTH (8u)
#define MOTOR_CAN_LEFT_MOTOR_VOLTAGE_VECTOR_MEASUREMENT_LENGTH (8u)
#define MOTOR_CAN_LEFT_MOTOR_CURRENT_VECTOR_MEASUREMENT_LENGTH (8u)
#define MOTOR_CAN_LEFT_MOTOR_BACK_EMF_MEASUREMENT_PREDICTION_LENGTH (8u)
#define MOTOR_CAN_LEFT_VOLTAGE_RAIL15_V1_V65_MEASUREMENT_LENGTH (8u)
#define MOTOR_CAN_LEFT_VOLTAGE_RAIL2_V51_V2_MEASUREMENT_LENGTH (8u)
#define MOTOR_CAN_LEFT_FAN_SPEED_MEASUREMENT_LENGTH (8u)
#define MOTOR_CAN_LEFT_SINK_MOTOR_TEMP_MEASUREMENT_LENGTH (8u)
#define MOTOR_CAN_LEFT_AIR_IN_CPU_TEMP_MEASUREMENT_LENGTH (8u)
#define MOTOR_CAN_LEFT_AIR_OUT_CAP_TEMP_MEASUREMENT_LENGTH (8u)
#define MOTOR_CAN_LEFT_ODOMETER_BUS_AH_MEASUREMENT_LENGTH (8u)
#define MOTOR_CAN_RIGHT_ID_INFO_LENGTH (8u)
#define MOTOR_CAN_RIGHT_STATUS_LENGTH (8u)
#define MOTOR_CAN_RIGHT_BUS_MEASUREMENT_LENGTH (8u)
#define MOTOR_CAN_RIGHT_VELOCITY_MEASUREMENT_LENGTH (8u)
#define MOTOR_CAN_RIGHT_PHASE_CURRENT_MEASUREMENT_LENGTH (8u)
#define MOTOR_CAN_RIGHT_MOTOR_VOLTAGE_VECTOR_MEASUREMENT_LENGTH (8u)
#define MOTOR_CAN_RIGHT_MOTOR_CURRENT_VECTOR_MEASUREMENT_LENGTH (8u)
#define MOTOR_CAN_RIGHT_MOTOR_BACK_EMF_MEASUREMENT_PREDICTION_LENGTH (8u)
#define MOTOR_CAN_RIGHT_VOLTAGE_RAIL15_V1_V65_MEASUREMENT_LENGTH (8u)
#define MOTOR_CAN_RIGHT_VOLTAGE_RAIL2_V51_V2_MEASUREMENT_LENGTH (8u)
#define MOTOR_CAN_RIGHT_FAN_SPEED_MEASUREMENT_LENGTH (8u)
#define MOTOR_CAN_RIGHT_SINK_MOTOR_TEMP_MEASUREMENT_LENGTH (8u)
#define MOTOR_CAN_RIGHT_AIR_IN_CPU_TEMP_MEASUREMENT_LENGTH (8u)
#define MOTOR_CAN_RIGHT_AIR_OUT_CAP_TEMP_MEASUREMENT_LENGTH (8u)
#define MOTOR_CAN_RIGHT_ODOMETER_BUS_AH_MEASUREMENT_LENGTH (8u)
#define MOTOR_CAN_LEFT_DRIVE_COMMAND_LENGTH (8u)
#define MOTOR_CAN_LEFT_MOTOR_POWER_COMMAND_LENGTH (8u)
#define MOTOR_CAN_LEFT_RESET_COMMAND_LENGTH (8u)
#define MOTOR_CAN_RIGHT_DRIVE_COMMAND_LENGTH (8u)
#define MOTOR_CAN_RIGHT_MOTOR_POWER_COMMAND_LENGTH (8u)
#define MOTOR_CAN_RIGHT_RESET_COMMAND_LENGTH (8u)

/* Extended or standard frame types. */
#define MOTOR_CAN_LEFT_ID_INFO_IS_EXTENDED (0)
#define MOTOR_CAN_LEFT_STATUS_IS_EXTENDED (0)
#define MOTOR_CAN_LEFT_BUS_MEASUREMENT_IS_EXTENDED (0)
#define MOTOR_CAN_LEFT_VELOCITY_MEASUREMENT_IS_EXTENDED (0)
#define MOTOR_CAN_LEFT_PHASE_CURRENT_MEASUREMENT_IS_EXTENDED (0)
#define MOTOR_CAN_LEFT_MOTOR_VOLTAGE_VECTOR_MEASUREMENT_IS_EXTENDED (0)
#define MOTOR_CAN_LEFT_MOTOR_CURRENT_VECTOR_MEASUREMENT_IS_EXTENDED (0)
#define MOTOR_CAN_LEFT_MOTOR_BACK_EMF_MEASUREMENT_PREDICTION_IS_EXTENDED (0)
#define MOTOR_CAN_LEFT_VOLTAGE_RAIL15_V1_V65_MEASUREMENT_IS_EXTENDED (0)
#define MOTOR_CAN_LEFT_VOLTAGE_RAIL2_V51_V2_MEASUREMENT_IS_EXTENDED (0)
#define MOTOR_CAN_LEFT_FAN_SPEED_MEASUREMENT_IS_EXTENDED (0)
#define MOTOR_CAN_LEFT_SINK_MOTOR_TEMP_MEASUREMENT_IS_EXTENDED (0)
#define MOTOR_CAN_LEFT_AIR_IN_CPU_TEMP_MEASUREMENT_IS_EXTENDED (0)
#define MOTOR_CAN_LEFT_AIR_OUT_CAP_TEMP_MEASUREMENT_IS_EXTENDED (0)
#define MOTOR_CAN_LEFT_ODOMETER_BUS_AH_MEASUREMENT_IS_EXTENDED (0)
#define MOTOR_CAN_RIGHT_ID_INFO_IS_EXTENDED (0)
#define MOTOR_CAN_RIGHT_STATUS_IS_EXTENDED (0)
#define MOTOR_CAN_RIGHT_BUS_MEASUREMENT_IS_EXTENDED (0)
#define MOTOR_CAN_RIGHT_VELOCITY_MEASUREMENT_IS_EXTENDED (0)
#define MOTOR_CAN_RIGHT_PHASE_CURRENT_MEASUREMENT_IS_EXTENDED (0)
#define MOTOR_CAN_RIGHT_MOTOR_VOLTAGE_VECTOR_MEASUREMENT_IS_EXTENDED (0)
#define MOTOR_CAN_RIGHT_MOTOR_CURRENT_VECTOR_MEASUREMENT_IS_EXTENDED (0)
#define MOTOR_CAN_RIGHT_MOTOR_BACK_EMF_MEASUREMENT_PREDICTION_IS_EXTENDED (0)
#define MOTOR_CAN_RIGHT_VOLTAGE_RAIL15_V1_V65_MEASUREMENT_IS_EXTENDED (0)
#define MOTOR_CAN_RIGHT_VOLTAGE_RAIL2_V51_V2_MEASUREMENT_IS_EXTENDED (0)
#define MOTOR_CAN_RIGHT_FAN_SPEED_MEASUREMENT_IS_EXTENDED (0)
#define MOTOR_CAN_RIGHT_SINK_MOTOR_TEMP_MEASUREMENT_IS_EXTENDED (0)
#define MOTOR_CAN_RIGHT_AIR_IN_CPU_TEMP_MEASUREMENT_IS_EXTENDED (0)
#define MOTOR_CAN_RIGHT_AIR_OUT_CAP_TEMP_MEASUREMENT_IS_EXTENDED (0)
#define MOTOR_CAN_RIGHT_ODOMETER_BUS_AH_MEASUREMENT_IS_EXTENDED (0)
#define MOTOR_CAN_LEFT_DRIVE_COMMAND_IS_EXTENDED (0)
#define MOTOR_CAN_LEFT_MOTOR_POWER_COMMAND_IS_EXTENDED (0)
#define MOTOR_CAN_LEFT_RESET_COMMAND_IS_EXTENDED (0)
#define MOTOR_CAN_RIGHT_DRIVE_COMMAND_IS_EXTENDED (0)
#define MOTOR_CAN_RIGHT_MOTOR_POWER_COMMAND_IS_EXTENDED (0)
#define MOTOR_CAN_RIGHT_RESET_COMMAND_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define MOTOR_CAN_LEFT_ID_INFO_CYCLE_TIME_MS (1000u)
#define MOTOR_CAN_LEFT_STATUS_CYCLE_TIME_MS (200u)
#define MOTOR_CAN_LEFT_BUS_MEASUREMENT_CYCLE_TIME_MS (200u)
#define MOTOR_CAN_LEFT_VELOCITY_MEASUREMENT_CYCLE_TIME_MS (200u)
#define MOTOR_CAN_LEFT_PHASE_CURRENT_MEASUREMENT_CYCLE_TIME_MS (200u)
#define MOTOR_CAN_LEFT_MOTOR_VOLTAGE_VECTOR_MEASUREMENT_CYCLE_TIME_MS (200u)
#define MOTOR_CAN_LEFT_MOTOR_CURRENT_VECTOR_MEASUREMENT_CYCLE_TIME_MS (200u)
#define MOTOR_CAN_LEFT_MOTOR_BACK_EMF_MEASUREMENT_PREDICTION_CYCLE_TIME_MS (200u)
#define MOTOR_CAN_LEFT_VOLTAGE_RAIL15_V1_V65_MEASUREMENT_CYCLE_TIME_MS (1000u)
#define MOTOR_CAN_LEFT_VOLTAGE_RAIL2_V51_V2_MEASUREMENT_CYCLE_TIME_MS (1000u)
#define MOTOR_CAN_LEFT_FAN_SPEED_MEASUREMENT_CYCLE_TIME_MS (1000u)
#define MOTOR_CAN_LEFT_SINK_MOTOR_TEMP_MEASUREMENT_CYCLE_TIME_MS (1000u)
#define MOTOR_CAN_LEFT_AIR_IN_CPU_TEMP_MEASUREMENT_CYCLE_TIME_MS (5000u)
#define MOTOR_CAN_LEFT_AIR_OUT_CAP_TEMP_MEASUREMENT_CYCLE_TIME_MS (5000u)
#define MOTOR_CAN_LEFT_ODOMETER_BUS_AH_MEASUREMENT_CYCLE_TIME_MS (1000u)
#define MOTOR_CAN_RIGHT_ID_INFO_CYCLE_TIME_MS (1000u)
#define MOTOR_CAN_RIGHT_STATUS_CYCLE_TIME_MS (200u)
#define MOTOR_CAN_RIGHT_BUS_MEASUREMENT_CYCLE_TIME_MS (200u)
#define MOTOR_CAN_RIGHT_VELOCITY_MEASUREMENT_CYCLE_TIME_MS (200u)
#define MOTOR_CAN_RIGHT_PHASE_CURRENT_MEASUREMENT_CYCLE_TIME_MS (200u)
#define MOTOR_CAN_RIGHT_MOTOR_VOLTAGE_VECTOR_MEASUREMENT_CYCLE_TIME_MS (200u)
#define MOTOR_CAN_RIGHT_MOTOR_CURRENT_VECTOR_MEASUREMENT_CYCLE_TIME_MS (200u)
#define MOTOR_CAN_RIGHT_MOTOR_BACK_EMF_MEASUREMENT_PREDICTION_CYCLE_TIME_MS (200u)
#define MOTOR_CAN_RIGHT_VOLTAGE_RAIL15_V1_V65_MEASUREMENT_CYCLE_TIME_MS (1000u)
#define MOTOR_CAN_RIGHT_VOLTAGE_RAIL2_V51_V2_MEASUREMENT_CYCLE_TIME_MS (1000u)
#define MOTOR_CAN_RIGHT_FAN_SPEED_MEASUREMENT_CYCLE_TIME_MS (1000u)
#define MOTOR_CAN_RIGHT_SINK_MOTOR_TEMP_MEASUREMENT_CYCLE_TIME_MS (1000u)
#define MOTOR_CAN_RIGHT_AIR_IN_CPU_TEMP_MEASUREMENT_CYCLE_TIME_MS (5000u)
#define MOTOR_CAN_RIGHT_AIR_OUT_CAP_TEMP_MEASUREMENT_CYCLE_TIME_MS (5000u)
#define MOTOR_CAN_RIGHT_ODOMETER_BUS_AH_MEASUREMENT_CYCLE_TIME_MS (1000u)
#define MOTOR_CAN_LEFT_DRIVE_COMMAND_CYCLE_TIME_MS (0u)
#define MOTOR_CAN_LEFT_MOTOR_POWER_COMMAND_CYCLE_TIME_MS (0u)
#define MOTOR_CAN_LEFT_RESET_COMMAND_CYCLE_TIME_MS (0u)
#define MOTOR_CAN_RIGHT_DRIVE_COMMAND_CYCLE_TIME_MS (0u)
#define MOTOR_CAN_RIGHT_MOTOR_POWER_COMMAND_CYCLE_TIME_MS (0u)
#define MOTOR_CAN_RIGHT_RESET_COMMAND_CYCLE_TIME_MS (0u)

/* Signal choices. */


/**
 * Signals in message Left_IDInfo.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_left_id_info_t {
    /**
     * Device serial number, allocated at manufacture.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t tritium_id;

    /**
     * TRIa stored as a string
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t serial_number;
};

/**
 * Signals in message Left_Status.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_left_status_t {
    /**
     * Bridge PWM
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t limit_flag_bridge_pwm;

    /**
     * Motor Current
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t limit_flag_motor_current;

    /**
     * Velocity
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t limit_flag_velocity;

    /**
     * Bus Current
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t limit_flag_bus_current;

    /**
     * Bus Voltage Upper Limit
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t limit_flag_bus_voltage_upper_limit;

    /**
     * Bus Voltage Lower Limit
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t limit_flag_bus_voltage_lower_limit;

    /**
     * Heatsink Temperature
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t limit_flag_heatsink_temperature;

    /**
     * Hardware over current
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t error_flag_hw_overcurrent;

    /**
     * Software over current
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t error_flag_sw_overcurrent;

    /**
     * DC Bus over voltage
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t error_flag_dc_bus_overvoltage;

    /**
     * Bad motor position hall sequence
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t error_flag_motor_position_hall_sequence;

    /**
     * Watchdog caused last reset
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t error_flag_watchdog;

    /**
     * Config read error (some values may be reset to defaults)
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t error_flag_config_read;

    /**
     * A 15V rail under voltage lock out occurred
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t error_flag15_v_undervoltage;

    /**
     * The index of the motor currently being used. Driver controls could use this to check against a switch position or to display to the driver if desired.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t active_motor;
};

/**
 * Signals in message Left_BusMeasurement.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_left_bus_measurement_t {
    /**
     * DC bus voltage at the controller.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float bus_voltage;

    /**
     * Current drawn from the DC bus by the controller.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float bus_current;
};

/**
 * Signals in message Left_VelocityMeasurement.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_left_velocity_measurement_t {
    /**
     * Vehicle velocity in metres / second.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float motor_velocity;

    /**
     * Motor angular frequency in revolutions per minute.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vehicle_velocity;
};

/**
 * Signals in message Left_PhaseCurrentMeasurement.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_left_phase_current_measurement_t {
    /**
     * RMS current in motor Phase B.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float phase_current_b;

    /**
     * RMS current in motor Phase A.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float phase_current_a;
};

/**
 * Signals in message Left_MotorVoltageVectorMeasurement.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_left_motor_voltage_vector_measurement_t {
    /**
     * Imaginary component of the applied non-rotating voltage vector to the motor.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vq;

    /**
     * Real component of the applied non-rotating voltage vector to the motor.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vd;
};

/**
 * Signals in message Left_MotorCurrentVectorMeasurement.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_left_motor_current_vector_measurement_t {
    /**
     * Imaginary component of the applied non-rotating current vector to the motor. This current produces torque in the motor and should be in phase with the back-EMF of the motor.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float iq;

    /**
     * Real component of the applied non-rotating current vector to the motor. This vector represents the field current of the motor.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float id;
};

/**
 * Signals in message Left_MotorBackEmfMeasurementPrediction.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_left_motor_back_emf_measurement_prediction_t {
    /**
     * The peak of the phase to neutral motor voltage.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float bem_fq;

    /**
     * By definition this value is always 0V.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float bem_fd;
};

/**
 * Signals in message Left_VoltageRail15V1V65Measurement.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_left_voltage_rail15_v1_v65_measurement_t {
    /**
     * Actual voltage level of the 1.65V analog reference.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float reference1_v65;

    /**
     * Actual voltage level of the 15V power rail.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float supply15_v;
};

/**
 * Signals in message Left_VoltageRail2V51V2Measurement.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_left_voltage_rail2_v51_v2_measurement_t {
    /**
     * Actual voltage level of the 1.2V DSP power rail.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float supply1_v2;

    /**
     * Actual voltage level of the 2.5V FPGA power rail.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float supply2_v5;
};

/**
 * Signals in message Left_FanSpeedMeasurement.
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_left_fan_speed_measurement_t {
    /**
     * Drive voltage percentage to cooling fan. If this value is above 0%, then the fan should be spinning.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float voltage_percentage;

    /**
     * Cooling fan speed in revolutions per minute.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float fan_speed;
};

/**
 * Signals in message Left_SinkMotorTempMeasurement.
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_left_sink_motor_temp_measurement_t {
    /**
     * Internal temperature of the motor.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float motor_temp;

    /**
     * Surface temperature of the controller heatsink.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float heatsink_temp;
};

/**
 * Signals in message Left_AirInCpuTempMeasurement.
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_left_air_in_cpu_temp_measurement_t {
    /**
     * Temperature of the internal processor.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float processor_temp;

    /**
     * Ambient air temperature at the ventilation inlet of the controller.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float air_inlet_temp;
};

/**
 * Signals in message Left_AirOutCapTempMeasurement.
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_left_air_out_cap_temp_measurement_t {
    /**
     * Ambient temperature of the internal bus capacitors. Unused in 20kW WaveSculptor.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float capacitor_temp;

    /**
     * Ambient air temperature at the ventilation outlet of the controller. Unused in 20kW WaveSculptor.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float air_out_temp;
};

/**
 * Signals in message Left_OdometerBusAhMeasurement.
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_left_odometer_bus_ah_measurement_t {
    /**
     * The distance the vehicle has travelled since reset
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float odometer;

    /**
     * The charge flow into the controller bus voltage from the time of reset.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float dc_bus;
};

/**
 * Signals in message Right_IDInfo.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_right_id_info_t {
    /**
     * Device serial number, allocated at manufacture.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t tritium_id;

    /**
     * TRIa stored as a string
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t serial_number;
};

/**
 * Signals in message Right_Status.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_right_status_t {
    /**
     * Bridge PWM
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t limit_flag_bridge_pwm;

    /**
     * Motor Current
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t limit_flag_motor_current;

    /**
     * Velocity
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t limit_flag_velocity;

    /**
     * Bus Current
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t limit_flag_bus_current;

    /**
     * Bus Voltage Upper Limit
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t limit_flag_bus_voltage_upper_limit;

    /**
     * Bus Voltage Lower Limit
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t limit_flag_bus_voltage_lower_limit;

    /**
     * Heatsink Temperature
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t limit_flag_heatsink_temperature;

    /**
     * Hardware over current
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t error_flag_hw_overcurrent;

    /**
     * Software over current
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t error_flag_sw_overcurrent;

    /**
     * DC Bus over voltage
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t error_flag_dc_bus_overvoltage;

    /**
     * Bad motor position hall sequence
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t error_flag_motor_position_hall_sequence;

    /**
     * Watchdog caused last reset
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t error_flag_watchdog;

    /**
     * Config read error (some values may be reset to defaults)
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t error_flag_config_read;

    /**
     * A 15V rail under voltage lock out occurred
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t error_flag15_v_undervoltage;

    /**
     * The index of the motor currently being used. Driver controls could use this to check against a switch position or to display to the driver if desired.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t active_motor;
};

/**
 * Signals in message Right_BusMeasurement.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_right_bus_measurement_t {
    /**
     * DC bus voltage at the controller.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float bus_voltage;

    /**
     * Current drawn from the DC bus by the controller.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float bus_current;
};

/**
 * Signals in message Right_VelocityMeasurement.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_right_velocity_measurement_t {
    /**
     * Vehicle velocity in metres / second.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float motor_velocity;

    /**
     * Motor angular frequency in revolutions per minute.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vehicle_velocity;
};

/**
 * Signals in message Right_PhaseCurrentMeasurement.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_right_phase_current_measurement_t {
    /**
     * RMS current in motor Phase B.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float phase_current_b;

    /**
     * RMS current in motor Phase A.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float phase_current_a;
};

/**
 * Signals in message Right_MotorVoltageVectorMeasurement.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_right_motor_voltage_vector_measurement_t {
    /**
     * Imaginary component of the applied non-rotating voltage vector to the motor.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vq;

    /**
     * Real component of the applied non-rotating voltage vector to the motor.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vd;
};

/**
 * Signals in message Right_MotorCurrentVectorMeasurement.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_right_motor_current_vector_measurement_t {
    /**
     * Imaginary component of the applied non-rotating current vector to the motor. This current produces torque in the motor and should be in phase with the back-EMF of the motor.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float iq;

    /**
     * Real component of the applied non-rotating current vector to the motor. This vector represents the field current of the motor.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float id;
};

/**
 * Signals in message Right_MotorBackEmfMeasurementPrediction.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_right_motor_back_emf_measurement_prediction_t {
    /**
     * The peak of the phase to neutral motor voltage.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float bem_fq;

    /**
     * By definition this value is always 0V.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float bem_fd;
};

/**
 * Signals in message Right_VoltageRail15V1V65Measurement.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_right_voltage_rail15_v1_v65_measurement_t {
    /**
     * Actual voltage level of the 1.65V analog reference.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float reference1_v65;

    /**
     * Actual voltage level of the 15V power rail.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float supply15_v;
};

/**
 * Signals in message Right_VoltageRail2V51V2Measurement.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_right_voltage_rail2_v51_v2_measurement_t {
    /**
     * Actual voltage level of the 1.2V DSP power rail.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float supply1_v2;

    /**
     * Actual voltage level of the 2.5V FPGA power rail.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float supply2_v5;
};

/**
 * Signals in message Right_FanSpeedMeasurement.
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_right_fan_speed_measurement_t {
    /**
     * Drive voltage percentage to cooling fan. If this value is above 0%, then the fan should be spinning.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float voltage_percentage;

    /**
     * Cooling fan speed in revolutions per minute.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float fan_speed;
};

/**
 * Signals in message Right_SinkMotorTempMeasurement.
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_right_sink_motor_temp_measurement_t {
    /**
     * Internal temperature of the motor.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float motor_temp;

    /**
     * Surface temperature of the controller heatsink.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float heatsink_temp;
};

/**
 * Signals in message Right_AirInCpuTempMeasurement.
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_right_air_in_cpu_temp_measurement_t {
    /**
     * Temperature of the internal processor.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float processor_temp;

    /**
     * Ambient air temperature at the ventilation inlet of the controller.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float air_inlet_temp;
};

/**
 * Signals in message Right_AirOutCapTempMeasurement.
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_right_air_out_cap_temp_measurement_t {
    /**
     * Ambient temperature of the internal bus capacitors. Unused in 20kW WaveSculptor.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float capacitor_temp;

    /**
     * Ambient air temperature at the ventilation outlet of the controller. Unused in 20kW WaveSculptor.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float air_out_temp;
};

/**
 * Signals in message Right_OdometerBusAhMeasurement.
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_right_odometer_bus_ah_measurement_t {
    /**
     * The distance the vehicle has travelled since reset
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float odometer;

    /**
     * The charge flow into the controller bus voltage from the time of reset.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float dc_bus;
};

/**
 * Signals in message Left_DriveCommand.
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_left_drive_command_t {
    /**
     * Desired motor velocity set point in metres/second
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float motor_velocity;

    /**
     * Desired motor current set point as a percentage of maximum current setting.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float motor_current;
};

/**
 * Signals in message Left_MotorPowerCommand.
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_left_motor_power_command_t {
    /**
     * Desired set point of current drawn from the bus by the controller as a percentage of absolute bus current limit.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float bus_current;
};

/**
 * Signals in message Left_ResetCommand.
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_left_reset_command_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Right_DriveCommand.
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_right_drive_command_t {
    /**
     * Desired motor velocity set point in metres/second.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float motor_velocity;

    /**
     * Desired motor current set point as a percentage of maximum current setting.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float motor_current;
};

/**
 * Signals in message Right_MotorPowerCommand.
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_right_motor_power_command_t {
    /**
     * Desired set point of current drawn from the bus by the controller as a percentage of absolute bus current limit.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float bus_current;
};

/**
 * Signals in message Right_ResetCommand.
 *
 * All signal values are as on the CAN bus.
 */
struct motor_can_right_reset_command_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Pack message Left_IDInfo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_left_id_info_pack(
    uint8_t *dst_p,
    const struct motor_can_left_id_info_t *src_p,
    size_t size);

/**
 * Unpack message Left_IDInfo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_left_id_info_unpack(
    struct motor_can_left_id_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t motor_can_left_id_info_tritium_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_id_info_tritium_id_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_id_info_tritium_id_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t motor_can_left_id_info_serial_number_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_id_info_serial_number_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_id_info_serial_number_is_in_range(uint32_t value);

/**
 * Pack message Left_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_left_status_pack(
    uint8_t *dst_p,
    const struct motor_can_left_status_t *src_p,
    size_t size);

/**
 * Unpack message Left_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_left_status_unpack(
    struct motor_can_left_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_left_status_limit_flag_bridge_pwm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_status_limit_flag_bridge_pwm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_status_limit_flag_bridge_pwm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_left_status_limit_flag_motor_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_status_limit_flag_motor_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_status_limit_flag_motor_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_left_status_limit_flag_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_status_limit_flag_velocity_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_status_limit_flag_velocity_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_left_status_limit_flag_bus_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_status_limit_flag_bus_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_status_limit_flag_bus_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_left_status_limit_flag_bus_voltage_upper_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_status_limit_flag_bus_voltage_upper_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_status_limit_flag_bus_voltage_upper_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_left_status_limit_flag_bus_voltage_lower_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_status_limit_flag_bus_voltage_lower_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_status_limit_flag_bus_voltage_lower_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_left_status_limit_flag_heatsink_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_status_limit_flag_heatsink_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_status_limit_flag_heatsink_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_left_status_error_flag_hw_overcurrent_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_status_error_flag_hw_overcurrent_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_status_error_flag_hw_overcurrent_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_left_status_error_flag_sw_overcurrent_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_status_error_flag_sw_overcurrent_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_status_error_flag_sw_overcurrent_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_left_status_error_flag_dc_bus_overvoltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_status_error_flag_dc_bus_overvoltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_status_error_flag_dc_bus_overvoltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_left_status_error_flag_motor_position_hall_sequence_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_status_error_flag_motor_position_hall_sequence_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_status_error_flag_motor_position_hall_sequence_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_left_status_error_flag_watchdog_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_status_error_flag_watchdog_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_status_error_flag_watchdog_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_left_status_error_flag_config_read_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_status_error_flag_config_read_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_status_error_flag_config_read_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_left_status_error_flag15_v_undervoltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_status_error_flag15_v_undervoltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_status_error_flag15_v_undervoltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t motor_can_left_status_active_motor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_status_active_motor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_status_active_motor_is_in_range(uint16_t value);

/**
 * Pack message Left_BusMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_left_bus_measurement_pack(
    uint8_t *dst_p,
    const struct motor_can_left_bus_measurement_t *src_p,
    size_t size);

/**
 * Unpack message Left_BusMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_left_bus_measurement_unpack(
    struct motor_can_left_bus_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_bus_measurement_bus_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_bus_measurement_bus_voltage_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_bus_measurement_bus_voltage_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_bus_measurement_bus_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_bus_measurement_bus_current_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_bus_measurement_bus_current_is_in_range(float value);

/**
 * Pack message Left_VelocityMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_left_velocity_measurement_pack(
    uint8_t *dst_p,
    const struct motor_can_left_velocity_measurement_t *src_p,
    size_t size);

/**
 * Unpack message Left_VelocityMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_left_velocity_measurement_unpack(
    struct motor_can_left_velocity_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_velocity_measurement_motor_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_velocity_measurement_motor_velocity_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_velocity_measurement_motor_velocity_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_velocity_measurement_vehicle_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_velocity_measurement_vehicle_velocity_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_velocity_measurement_vehicle_velocity_is_in_range(float value);

/**
 * Pack message Left_PhaseCurrentMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_left_phase_current_measurement_pack(
    uint8_t *dst_p,
    const struct motor_can_left_phase_current_measurement_t *src_p,
    size_t size);

/**
 * Unpack message Left_PhaseCurrentMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_left_phase_current_measurement_unpack(
    struct motor_can_left_phase_current_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_phase_current_measurement_phase_current_b_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_phase_current_measurement_phase_current_b_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_phase_current_measurement_phase_current_b_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_phase_current_measurement_phase_current_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_phase_current_measurement_phase_current_a_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_phase_current_measurement_phase_current_a_is_in_range(float value);

/**
 * Pack message Left_MotorVoltageVectorMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_left_motor_voltage_vector_measurement_pack(
    uint8_t *dst_p,
    const struct motor_can_left_motor_voltage_vector_measurement_t *src_p,
    size_t size);

/**
 * Unpack message Left_MotorVoltageVectorMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_left_motor_voltage_vector_measurement_unpack(
    struct motor_can_left_motor_voltage_vector_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_motor_voltage_vector_measurement_vq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_motor_voltage_vector_measurement_vq_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_motor_voltage_vector_measurement_vq_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_motor_voltage_vector_measurement_vd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_motor_voltage_vector_measurement_vd_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_motor_voltage_vector_measurement_vd_is_in_range(float value);

/**
 * Pack message Left_MotorCurrentVectorMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_left_motor_current_vector_measurement_pack(
    uint8_t *dst_p,
    const struct motor_can_left_motor_current_vector_measurement_t *src_p,
    size_t size);

/**
 * Unpack message Left_MotorCurrentVectorMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_left_motor_current_vector_measurement_unpack(
    struct motor_can_left_motor_current_vector_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_motor_current_vector_measurement_iq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_motor_current_vector_measurement_iq_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_motor_current_vector_measurement_iq_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_motor_current_vector_measurement_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_motor_current_vector_measurement_id_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_motor_current_vector_measurement_id_is_in_range(float value);

/**
 * Pack message Left_MotorBackEmfMeasurementPrediction.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_left_motor_back_emf_measurement_prediction_pack(
    uint8_t *dst_p,
    const struct motor_can_left_motor_back_emf_measurement_prediction_t *src_p,
    size_t size);

/**
 * Unpack message Left_MotorBackEmfMeasurementPrediction.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_left_motor_back_emf_measurement_prediction_unpack(
    struct motor_can_left_motor_back_emf_measurement_prediction_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_motor_back_emf_measurement_prediction_bem_fq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_motor_back_emf_measurement_prediction_bem_fq_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_motor_back_emf_measurement_prediction_bem_fq_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_motor_back_emf_measurement_prediction_bem_fd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_motor_back_emf_measurement_prediction_bem_fd_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_motor_back_emf_measurement_prediction_bem_fd_is_in_range(float value);

/**
 * Pack message Left_VoltageRail15V1V65Measurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_left_voltage_rail15_v1_v65_measurement_pack(
    uint8_t *dst_p,
    const struct motor_can_left_voltage_rail15_v1_v65_measurement_t *src_p,
    size_t size);

/**
 * Unpack message Left_VoltageRail15V1V65Measurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_left_voltage_rail15_v1_v65_measurement_unpack(
    struct motor_can_left_voltage_rail15_v1_v65_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_voltage_rail15_v1_v65_measurement_reference1_v65_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_voltage_rail15_v1_v65_measurement_reference1_v65_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_voltage_rail15_v1_v65_measurement_reference1_v65_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_voltage_rail15_v1_v65_measurement_supply15_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_voltage_rail15_v1_v65_measurement_supply15_v_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_voltage_rail15_v1_v65_measurement_supply15_v_is_in_range(float value);

/**
 * Pack message Left_VoltageRail2V51V2Measurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_left_voltage_rail2_v51_v2_measurement_pack(
    uint8_t *dst_p,
    const struct motor_can_left_voltage_rail2_v51_v2_measurement_t *src_p,
    size_t size);

/**
 * Unpack message Left_VoltageRail2V51V2Measurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_left_voltage_rail2_v51_v2_measurement_unpack(
    struct motor_can_left_voltage_rail2_v51_v2_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_voltage_rail2_v51_v2_measurement_supply1_v2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_voltage_rail2_v51_v2_measurement_supply1_v2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_voltage_rail2_v51_v2_measurement_supply1_v2_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_voltage_rail2_v51_v2_measurement_supply2_v5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_voltage_rail2_v51_v2_measurement_supply2_v5_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_voltage_rail2_v51_v2_measurement_supply2_v5_is_in_range(float value);

/**
 * Pack message Left_FanSpeedMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_left_fan_speed_measurement_pack(
    uint8_t *dst_p,
    const struct motor_can_left_fan_speed_measurement_t *src_p,
    size_t size);

/**
 * Unpack message Left_FanSpeedMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_left_fan_speed_measurement_unpack(
    struct motor_can_left_fan_speed_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_fan_speed_measurement_voltage_percentage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_fan_speed_measurement_voltage_percentage_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_fan_speed_measurement_voltage_percentage_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_fan_speed_measurement_fan_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_fan_speed_measurement_fan_speed_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_fan_speed_measurement_fan_speed_is_in_range(float value);

/**
 * Pack message Left_SinkMotorTempMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_left_sink_motor_temp_measurement_pack(
    uint8_t *dst_p,
    const struct motor_can_left_sink_motor_temp_measurement_t *src_p,
    size_t size);

/**
 * Unpack message Left_SinkMotorTempMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_left_sink_motor_temp_measurement_unpack(
    struct motor_can_left_sink_motor_temp_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_sink_motor_temp_measurement_motor_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_sink_motor_temp_measurement_motor_temp_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_sink_motor_temp_measurement_motor_temp_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_sink_motor_temp_measurement_heatsink_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_sink_motor_temp_measurement_heatsink_temp_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_sink_motor_temp_measurement_heatsink_temp_is_in_range(float value);

/**
 * Pack message Left_AirInCpuTempMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_left_air_in_cpu_temp_measurement_pack(
    uint8_t *dst_p,
    const struct motor_can_left_air_in_cpu_temp_measurement_t *src_p,
    size_t size);

/**
 * Unpack message Left_AirInCpuTempMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_left_air_in_cpu_temp_measurement_unpack(
    struct motor_can_left_air_in_cpu_temp_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_air_in_cpu_temp_measurement_processor_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_air_in_cpu_temp_measurement_processor_temp_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_air_in_cpu_temp_measurement_processor_temp_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_air_in_cpu_temp_measurement_air_inlet_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_air_in_cpu_temp_measurement_air_inlet_temp_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_air_in_cpu_temp_measurement_air_inlet_temp_is_in_range(float value);

/**
 * Pack message Left_AirOutCapTempMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_left_air_out_cap_temp_measurement_pack(
    uint8_t *dst_p,
    const struct motor_can_left_air_out_cap_temp_measurement_t *src_p,
    size_t size);

/**
 * Unpack message Left_AirOutCapTempMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_left_air_out_cap_temp_measurement_unpack(
    struct motor_can_left_air_out_cap_temp_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_air_out_cap_temp_measurement_capacitor_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_air_out_cap_temp_measurement_capacitor_temp_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_air_out_cap_temp_measurement_capacitor_temp_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_air_out_cap_temp_measurement_air_out_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_air_out_cap_temp_measurement_air_out_temp_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_air_out_cap_temp_measurement_air_out_temp_is_in_range(float value);

/**
 * Pack message Left_OdometerBusAhMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_left_odometer_bus_ah_measurement_pack(
    uint8_t *dst_p,
    const struct motor_can_left_odometer_bus_ah_measurement_t *src_p,
    size_t size);

/**
 * Unpack message Left_OdometerBusAhMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_left_odometer_bus_ah_measurement_unpack(
    struct motor_can_left_odometer_bus_ah_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_odometer_bus_ah_measurement_odometer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_odometer_bus_ah_measurement_odometer_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_odometer_bus_ah_measurement_odometer_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_odometer_bus_ah_measurement_dc_bus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_odometer_bus_ah_measurement_dc_bus_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_odometer_bus_ah_measurement_dc_bus_is_in_range(float value);

/**
 * Pack message Right_IDInfo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_right_id_info_pack(
    uint8_t *dst_p,
    const struct motor_can_right_id_info_t *src_p,
    size_t size);

/**
 * Unpack message Right_IDInfo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_right_id_info_unpack(
    struct motor_can_right_id_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t motor_can_right_id_info_tritium_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_id_info_tritium_id_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_id_info_tritium_id_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t motor_can_right_id_info_serial_number_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_id_info_serial_number_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_id_info_serial_number_is_in_range(uint32_t value);

/**
 * Pack message Right_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_right_status_pack(
    uint8_t *dst_p,
    const struct motor_can_right_status_t *src_p,
    size_t size);

/**
 * Unpack message Right_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_right_status_unpack(
    struct motor_can_right_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_right_status_limit_flag_bridge_pwm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_status_limit_flag_bridge_pwm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_status_limit_flag_bridge_pwm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_right_status_limit_flag_motor_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_status_limit_flag_motor_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_status_limit_flag_motor_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_right_status_limit_flag_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_status_limit_flag_velocity_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_status_limit_flag_velocity_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_right_status_limit_flag_bus_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_status_limit_flag_bus_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_status_limit_flag_bus_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_right_status_limit_flag_bus_voltage_upper_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_status_limit_flag_bus_voltage_upper_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_status_limit_flag_bus_voltage_upper_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_right_status_limit_flag_bus_voltage_lower_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_status_limit_flag_bus_voltage_lower_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_status_limit_flag_bus_voltage_lower_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_right_status_limit_flag_heatsink_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_status_limit_flag_heatsink_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_status_limit_flag_heatsink_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_right_status_error_flag_hw_overcurrent_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_status_error_flag_hw_overcurrent_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_status_error_flag_hw_overcurrent_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_right_status_error_flag_sw_overcurrent_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_status_error_flag_sw_overcurrent_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_status_error_flag_sw_overcurrent_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_right_status_error_flag_dc_bus_overvoltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_status_error_flag_dc_bus_overvoltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_status_error_flag_dc_bus_overvoltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_right_status_error_flag_motor_position_hall_sequence_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_status_error_flag_motor_position_hall_sequence_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_status_error_flag_motor_position_hall_sequence_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_right_status_error_flag_watchdog_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_status_error_flag_watchdog_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_status_error_flag_watchdog_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_right_status_error_flag_config_read_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_status_error_flag_config_read_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_status_error_flag_config_read_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t motor_can_right_status_error_flag15_v_undervoltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_status_error_flag15_v_undervoltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_status_error_flag15_v_undervoltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t motor_can_right_status_active_motor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_status_active_motor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_status_active_motor_is_in_range(uint16_t value);

/**
 * Pack message Right_BusMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_right_bus_measurement_pack(
    uint8_t *dst_p,
    const struct motor_can_right_bus_measurement_t *src_p,
    size_t size);

/**
 * Unpack message Right_BusMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_right_bus_measurement_unpack(
    struct motor_can_right_bus_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_bus_measurement_bus_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_bus_measurement_bus_voltage_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_bus_measurement_bus_voltage_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_bus_measurement_bus_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_bus_measurement_bus_current_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_bus_measurement_bus_current_is_in_range(float value);

/**
 * Pack message Right_VelocityMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_right_velocity_measurement_pack(
    uint8_t *dst_p,
    const struct motor_can_right_velocity_measurement_t *src_p,
    size_t size);

/**
 * Unpack message Right_VelocityMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_right_velocity_measurement_unpack(
    struct motor_can_right_velocity_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_velocity_measurement_motor_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_velocity_measurement_motor_velocity_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_velocity_measurement_motor_velocity_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_velocity_measurement_vehicle_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_velocity_measurement_vehicle_velocity_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_velocity_measurement_vehicle_velocity_is_in_range(float value);

/**
 * Pack message Right_PhaseCurrentMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_right_phase_current_measurement_pack(
    uint8_t *dst_p,
    const struct motor_can_right_phase_current_measurement_t *src_p,
    size_t size);

/**
 * Unpack message Right_PhaseCurrentMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_right_phase_current_measurement_unpack(
    struct motor_can_right_phase_current_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_phase_current_measurement_phase_current_b_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_phase_current_measurement_phase_current_b_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_phase_current_measurement_phase_current_b_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_phase_current_measurement_phase_current_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_phase_current_measurement_phase_current_a_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_phase_current_measurement_phase_current_a_is_in_range(float value);

/**
 * Pack message Right_MotorVoltageVectorMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_right_motor_voltage_vector_measurement_pack(
    uint8_t *dst_p,
    const struct motor_can_right_motor_voltage_vector_measurement_t *src_p,
    size_t size);

/**
 * Unpack message Right_MotorVoltageVectorMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_right_motor_voltage_vector_measurement_unpack(
    struct motor_can_right_motor_voltage_vector_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_motor_voltage_vector_measurement_vq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_motor_voltage_vector_measurement_vq_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_motor_voltage_vector_measurement_vq_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_motor_voltage_vector_measurement_vd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_motor_voltage_vector_measurement_vd_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_motor_voltage_vector_measurement_vd_is_in_range(float value);

/**
 * Pack message Right_MotorCurrentVectorMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_right_motor_current_vector_measurement_pack(
    uint8_t *dst_p,
    const struct motor_can_right_motor_current_vector_measurement_t *src_p,
    size_t size);

/**
 * Unpack message Right_MotorCurrentVectorMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_right_motor_current_vector_measurement_unpack(
    struct motor_can_right_motor_current_vector_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_motor_current_vector_measurement_iq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_motor_current_vector_measurement_iq_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_motor_current_vector_measurement_iq_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_motor_current_vector_measurement_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_motor_current_vector_measurement_id_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_motor_current_vector_measurement_id_is_in_range(float value);

/**
 * Pack message Right_MotorBackEmfMeasurementPrediction.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_right_motor_back_emf_measurement_prediction_pack(
    uint8_t *dst_p,
    const struct motor_can_right_motor_back_emf_measurement_prediction_t *src_p,
    size_t size);

/**
 * Unpack message Right_MotorBackEmfMeasurementPrediction.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_right_motor_back_emf_measurement_prediction_unpack(
    struct motor_can_right_motor_back_emf_measurement_prediction_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_motor_back_emf_measurement_prediction_bem_fq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_motor_back_emf_measurement_prediction_bem_fq_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_motor_back_emf_measurement_prediction_bem_fq_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_motor_back_emf_measurement_prediction_bem_fd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_motor_back_emf_measurement_prediction_bem_fd_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_motor_back_emf_measurement_prediction_bem_fd_is_in_range(float value);

/**
 * Pack message Right_VoltageRail15V1V65Measurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_right_voltage_rail15_v1_v65_measurement_pack(
    uint8_t *dst_p,
    const struct motor_can_right_voltage_rail15_v1_v65_measurement_t *src_p,
    size_t size);

/**
 * Unpack message Right_VoltageRail15V1V65Measurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_right_voltage_rail15_v1_v65_measurement_unpack(
    struct motor_can_right_voltage_rail15_v1_v65_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_voltage_rail15_v1_v65_measurement_reference1_v65_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_voltage_rail15_v1_v65_measurement_reference1_v65_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_voltage_rail15_v1_v65_measurement_reference1_v65_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_voltage_rail15_v1_v65_measurement_supply15_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_voltage_rail15_v1_v65_measurement_supply15_v_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_voltage_rail15_v1_v65_measurement_supply15_v_is_in_range(float value);

/**
 * Pack message Right_VoltageRail2V51V2Measurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_right_voltage_rail2_v51_v2_measurement_pack(
    uint8_t *dst_p,
    const struct motor_can_right_voltage_rail2_v51_v2_measurement_t *src_p,
    size_t size);

/**
 * Unpack message Right_VoltageRail2V51V2Measurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_right_voltage_rail2_v51_v2_measurement_unpack(
    struct motor_can_right_voltage_rail2_v51_v2_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_voltage_rail2_v51_v2_measurement_supply1_v2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_voltage_rail2_v51_v2_measurement_supply1_v2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_voltage_rail2_v51_v2_measurement_supply1_v2_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_voltage_rail2_v51_v2_measurement_supply2_v5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_voltage_rail2_v51_v2_measurement_supply2_v5_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_voltage_rail2_v51_v2_measurement_supply2_v5_is_in_range(float value);

/**
 * Pack message Right_FanSpeedMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_right_fan_speed_measurement_pack(
    uint8_t *dst_p,
    const struct motor_can_right_fan_speed_measurement_t *src_p,
    size_t size);

/**
 * Unpack message Right_FanSpeedMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_right_fan_speed_measurement_unpack(
    struct motor_can_right_fan_speed_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_fan_speed_measurement_voltage_percentage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_fan_speed_measurement_voltage_percentage_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_fan_speed_measurement_voltage_percentage_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_fan_speed_measurement_fan_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_fan_speed_measurement_fan_speed_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_fan_speed_measurement_fan_speed_is_in_range(float value);

/**
 * Pack message Right_SinkMotorTempMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_right_sink_motor_temp_measurement_pack(
    uint8_t *dst_p,
    const struct motor_can_right_sink_motor_temp_measurement_t *src_p,
    size_t size);

/**
 * Unpack message Right_SinkMotorTempMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_right_sink_motor_temp_measurement_unpack(
    struct motor_can_right_sink_motor_temp_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_sink_motor_temp_measurement_motor_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_sink_motor_temp_measurement_motor_temp_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_sink_motor_temp_measurement_motor_temp_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_sink_motor_temp_measurement_heatsink_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_sink_motor_temp_measurement_heatsink_temp_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_sink_motor_temp_measurement_heatsink_temp_is_in_range(float value);

/**
 * Pack message Right_AirInCpuTempMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_right_air_in_cpu_temp_measurement_pack(
    uint8_t *dst_p,
    const struct motor_can_right_air_in_cpu_temp_measurement_t *src_p,
    size_t size);

/**
 * Unpack message Right_AirInCpuTempMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_right_air_in_cpu_temp_measurement_unpack(
    struct motor_can_right_air_in_cpu_temp_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_air_in_cpu_temp_measurement_processor_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_air_in_cpu_temp_measurement_processor_temp_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_air_in_cpu_temp_measurement_processor_temp_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_air_in_cpu_temp_measurement_air_inlet_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_air_in_cpu_temp_measurement_air_inlet_temp_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_air_in_cpu_temp_measurement_air_inlet_temp_is_in_range(float value);

/**
 * Pack message Right_AirOutCapTempMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_right_air_out_cap_temp_measurement_pack(
    uint8_t *dst_p,
    const struct motor_can_right_air_out_cap_temp_measurement_t *src_p,
    size_t size);

/**
 * Unpack message Right_AirOutCapTempMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_right_air_out_cap_temp_measurement_unpack(
    struct motor_can_right_air_out_cap_temp_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_air_out_cap_temp_measurement_capacitor_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_air_out_cap_temp_measurement_capacitor_temp_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_air_out_cap_temp_measurement_capacitor_temp_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_air_out_cap_temp_measurement_air_out_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_air_out_cap_temp_measurement_air_out_temp_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_air_out_cap_temp_measurement_air_out_temp_is_in_range(float value);

/**
 * Pack message Right_OdometerBusAhMeasurement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_right_odometer_bus_ah_measurement_pack(
    uint8_t *dst_p,
    const struct motor_can_right_odometer_bus_ah_measurement_t *src_p,
    size_t size);

/**
 * Unpack message Right_OdometerBusAhMeasurement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_right_odometer_bus_ah_measurement_unpack(
    struct motor_can_right_odometer_bus_ah_measurement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_odometer_bus_ah_measurement_odometer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_odometer_bus_ah_measurement_odometer_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_odometer_bus_ah_measurement_odometer_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_odometer_bus_ah_measurement_dc_bus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_odometer_bus_ah_measurement_dc_bus_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_odometer_bus_ah_measurement_dc_bus_is_in_range(float value);

/**
 * Pack message Left_DriveCommand.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_left_drive_command_pack(
    uint8_t *dst_p,
    const struct motor_can_left_drive_command_t *src_p,
    size_t size);

/**
 * Unpack message Left_DriveCommand.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_left_drive_command_unpack(
    struct motor_can_left_drive_command_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_drive_command_motor_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_drive_command_motor_velocity_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_drive_command_motor_velocity_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_drive_command_motor_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_drive_command_motor_current_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_drive_command_motor_current_is_in_range(float value);

/**
 * Pack message Left_MotorPowerCommand.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_left_motor_power_command_pack(
    uint8_t *dst_p,
    const struct motor_can_left_motor_power_command_t *src_p,
    size_t size);

/**
 * Unpack message Left_MotorPowerCommand.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_left_motor_power_command_unpack(
    struct motor_can_left_motor_power_command_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_left_motor_power_command_bus_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_left_motor_power_command_bus_current_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_left_motor_power_command_bus_current_is_in_range(float value);

/**
 * Pack message Left_ResetCommand.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_left_reset_command_pack(
    uint8_t *dst_p,
    const struct motor_can_left_reset_command_t *src_p,
    size_t size);

/**
 * Unpack message Left_ResetCommand.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_left_reset_command_unpack(
    struct motor_can_left_reset_command_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message Right_DriveCommand.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_right_drive_command_pack(
    uint8_t *dst_p,
    const struct motor_can_right_drive_command_t *src_p,
    size_t size);

/**
 * Unpack message Right_DriveCommand.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_right_drive_command_unpack(
    struct motor_can_right_drive_command_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_drive_command_motor_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_drive_command_motor_velocity_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_drive_command_motor_velocity_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_drive_command_motor_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_drive_command_motor_current_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_drive_command_motor_current_is_in_range(float value);

/**
 * Pack message Right_MotorPowerCommand.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_right_motor_power_command_pack(
    uint8_t *dst_p,
    const struct motor_can_right_motor_power_command_t *src_p,
    size_t size);

/**
 * Unpack message Right_MotorPowerCommand.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_right_motor_power_command_unpack(
    struct motor_can_right_motor_power_command_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float motor_can_right_motor_power_command_bus_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double motor_can_right_motor_power_command_bus_current_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motor_can_right_motor_power_command_bus_current_is_in_range(float value);

/**
 * Pack message Right_ResetCommand.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int motor_can_right_reset_command_pack(
    uint8_t *dst_p,
    const struct motor_can_right_reset_command_t *src_p,
    size_t size);

/**
 * Unpack message Right_ResetCommand.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motor_can_right_reset_command_unpack(
    struct motor_can_right_reset_command_t *dst_p,
    const uint8_t *src_p,
    size_t size);

#endif
