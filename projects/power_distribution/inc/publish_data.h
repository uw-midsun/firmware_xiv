#pragma once

// Publishes current measurements over CAN as generated by current_measurement.
// Requires CAN, GPIO, soft timers, the event queue, and interrupts to be initialized.

#include <stdint.h>

#include "output.h"
#include "status.h"

// A callback which actually transmits the data over CAN.
typedef StatusCode (*DataTransmitter)(Output output, uint16_t current_data);

typedef struct PublishDataConfig {
  // Called to transmit the data, should call a CAN_TRANSMIT_POWER_DISTRIBUTION_* macro.
  DataTransmitter transmitter;

  // Outputs in this array will be published (in order), others will be ignored.
  Output *outputs_to_publish;
  uint16_t num_outputs_to_publish;  // length of preceding array
} PublishDataConfig;

// Initialize the module with the specified config.
StatusCode publish_data_init(PublishDataConfig *config);

// Publish the given set of current measurements.
// This should be called from a current_measurement callback.
StatusCode publish_data_publish(uint16_t current_measurements[NUM_OUTPUTS]);
