# Use full virtualisation to allow adding kernel modules
sudo: true

# Use trusty
#   https://docs.travis-ci.com/user/trusty-ci-environment/
dist: trusty

notifications:
  email: false

language: c

# enable "Build pushes" and "Build pull requests" in Travis CI
# - pull requests will always be built
# - only build pushes to master
branches:
  only:
    - master

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
      - llvm-toolchain-trusty-5.0
    packages:
      # ubuntu-toolchain-r-test
      - gcc-6
      - g++-6
      # llvm-toolchain-trusty-5.0
      - clang-5.0
      - clang-format-5.0
      # trusty repos
      #- python3
      #- python3-pip
      - libc6-i386

cache:
  directories:
    - ${HOME}/gcc-arm-none-eabi-6-2017-q2-update

before_script:
  # create directory that will be on the PATH
  - mkdir -p ${HOME}/.local/bin
  - export PATH=${HOME}/.local/bin:${PATH}

  - mkdir -p ${HOME}/source

  # install GCC ARM from GNU ARM Embedded Toolchain
  - export GCC_DIR=${HOME}/gcc-arm-none-eabi-6-2017-q2-update
  - export GCC_ARCHIVE=${HOME}/source/gcc-arm-none-eabi-6-2017-q2-update-linux.tar.bz2
  - export GCC_URL=https://developer.arm.com/-/media/Files/downloads/gnu-rm/6-2017q2/gcc-arm-none-eabi-6-2017-q2-update-linux.tar.bz2?revision=2cc92fb5-3e0e-402d-9197-bdfc8224d8a5?product=GNU%20Arm%20Embedded%20Toolchain,64-bit,,Linux,6-2017-q2-update
  - if [ ! -e ${GCC_DIR}/bin/arm-none-eabi-gcc ]; then
      wget $GCC_URL -O $GCC_ARCHIVE;
      tar xfj $GCC_ARCHIVE -C ${HOME};
    fi
  - export PATH=${PATH}:${GCC_DIR}/bin

  - ln -sf `which gcc-6` ${HOME}/.local/bin/gcc

  # build GNU Make 4.1 from source
  # TODO: cache this block as well
  - wget http://ftp.gnu.org/gnu/make/make-4.1.tar.gz
  - tar xvf make-4.1.tar.gz
  - cd make-4.1
  - ./configure --prefix=${HOME}/.local
  - make
  - make install
  - cd ..
  - rm -rf make-4.1

  # Install miniconda because python 3 is not stable for trusty
  - wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh
  - bash ~/miniconda.sh -b -p $HOME/miniconda
  - eval "$(${HOME}/miniconda/bin/conda shell.bash hook)"

  # clang
  - ln -sf `which clang-5.0` ${HOME}/.local/bin/clang
  - ln -sf `which clang-format-5.0` ${HOME}/.local/bin/clang-format

  # Install pylint for python3 used by miniconda
  - pip install --user pylint

  # force ${PATH} to update
  - hash -r

  # print versions of everything
  - arm-none-eabi-gcc --version
  - arm-none-eabi-objcopy --version
  - arm-none-eabi-objdump --version
  - arm-none-eabi-size --version
  - arm-none-eabi-gcc-ar --version
  - arm-none-eabi-gdb --version
  - gcc --version
  - make --version
  - clang --version
  - clang-format --version
  - pylint --version

script:
  - make test_format || travis_terminate 1;
  - make lint || travis_terminate 1;
  - make pylint || travis_terminate 1;
  - make build_all PLATFORM=stm32f0xx
  - make clean
  - make build_all PLATFORM=x86
  - make test_all PLATFORM=x86
  - make build_all PLATFORM=x86 COMPILER=clang

